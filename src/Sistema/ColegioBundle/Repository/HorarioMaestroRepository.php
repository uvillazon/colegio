<?php

namespace Sistema\ColegioBundle\Repository;

/**
 * HorarioMaestroRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HorarioMaestroRepository extends BaseRepository
{
    public function getHorariosDiponibles($idmaestro, $idgestion)
    {
        $rows = array();
        $horarios = $this->findBy(array("idgestion" => $idgestion, "idmaestro" => $idmaestro));
//        var_dump(count($horarios));
        if (count($horarios) == 0) {
            return array();
        }
        /**
         * @var \Sistema\ColegioBundle\Entity\HorarioMaestro $horario
         */
        foreach ($horarios as $horario) {
            array_push($rows, $this->getFechaPorLiteral($horario));


        }
//        var_dump($rows);
//        die();
        $arrayMerge = array();

        for ($i = 0; $i < count($rows); $i++) {
            $arrayMerge = array_merge($arrayMerge, $rows[$i]);
//            var_dump($arrayMerge);die();
        }
        $arrayResult = array();

        for ($i = 0; $i < count($arrayMerge); $i++) {
//            var_dump($arrayMerge[$i]["fecha_ini"]);
            if ($this->disponibleFechaReunion($idmaestro, $arrayMerge[$i]["fecha_ini"]->format("Y-m-d H:i:s"), $idgestion)) {
//                var_dump($arrayMerge[$i]);
//                $arrayMerge[$i]["fecha_ini"]->set($UTC);
//                die();
                array_push($arrayResult, $arrayMerge[$i]);
            }
        }
//        var_dump($array);
        return $arrayResult;
    }

    /**
     * @param \Sistema\ColegioBundle\Entity\HorarioMaestro $horario
     * @return array
     */
    public function getFechaPorLiteral($horario)
    {
        $rows = array();
        $day = "";
//        var_dump($horario->getDiaAtencion());
        switch ($horario->getDiaAtencion()) {
            case "LUNES":
                $day = "monday";
                break;
            case "MARTES":
                $day = "tuesday";
                break;
            case "MIERCOLES":
                $day = "wednesday";
                break;
            case "JUEVES":
                $day = "thursday";
                break;
            case "VIERNES":
                $day = "friday";
                break;

        }
//        var_dump($day);
        $rows = $this->get4Fechas($day, $horario);
        return $rows;

    }

    /**
     * @param  $day
     * @param \Sistema\ColegioBundle\Entity\HorarioMaestro $horario
     * @return array
     */
    public function get4Fechas($day, $horario)
    {
        $UTC = new \DateTimeZone("UTC");
//        var_dump($day);
        $rows = array();
//        var_dump($horario->getHoraIni()->format("H:i:s"));
//        die();
        $horaIni = $horario->getHoraIni()->format("H:i:s");
        $horaFin = $horario->getHoraFin()->format("H:i:s");

        $last = "last " . $day;
//        var_dump($last);
        $date = new \DateTime();
        var_dump($date);
//        var_dump($date);
        $searchRow = date("Y-m-d", strtotime($last, strtotime('today')));
        $lastDate = new \DateTime($searchRow);
//        var_dump($lastDate);
//        die();
//        var_dump($searchRow);die();
        if ($lastDate < $date) {
            $lastDate = $lastDate->modify('+7 day');
        }
//        var_dump($lastDate);
//        die();
        $fechaIni = new \DateTime($lastDate->format("Y-m-d " . $horaIni));
        var_dump($fechaIni);
        var_dump($fechaIni->setTimezone($UTC));
        die();
        $fechaFin = new \DateTime($lastDate->format("Y-m-d " . $horaFin));
        array_push($rows, array("fecha_ini" => $fechaIni, "fecha_fin" => $fechaFin));
//        var_dump($rows);
//        die();
        for ($i = 0; $i < 4; $i++) {
            $lastDate = $lastDate->modify('+7 day');
            $fechaIni = new \DateTime($lastDate->format("Y-m-d " . $horaIni));
            $fechaFin = new \DateTime($lastDate->format("Y-m-d " . $horaFin));
            array_push($rows, array("fecha_ini" => $fechaIni, "fecha_fin" => $fechaFin));

//            $time = date("H:i:s", $date);
//            var_dump($time);
        }
//        var_dump($rows);die();
        return $rows;
    }

    /**
     * @param $data
     * @param \Sistema\ColegioBundle\Entity\Maestros $maestro
     * @return \Sistema\ColegioBundle\Model\RespuestaSP
     */
    public function guardarReunionMaestroEstudiante($data, $maestro)
    {
        $result = new \Sistema\ColegioBundle\Model\RespuestaSP();
        try {

            if (!$this->disponibleFechaReunion($maestro->getIdmaestro(), $data["fecha_ini"], 2016)) {
                return new \Sistema\ColegioBundle\Model\RespuestaSP(false, "El dia seleccionado ya fue ocupado seleccione otro", null, 422);
            }
            $reunion = new \Sistema\ColegioBundle\Entity\ReunionMaestro();
            $reunion->setIdestudiante($data["idestudiante"]);
            $reunion->setMaestro($maestro);
            $reunion->setObservaciones($data["observaciones"]);
            $reunion->setMotivo(array_key_exists("motivo", $data) ? $data["motivo"] : null);
            $reunion->setFechaHora(new \DateTime($data["fecha_ini"]));
            $reunion->setIdgestion(2016);


            $this->_em->persist($reunion);
            $this->_em->flush();
            $result->data = $reunion;

        } catch (\Exception $e) {
            $result->msg = $e->getMessage();
            $result->success = false;
            $result->code = 401;
        }
        return $result;

    }

    public function disponibleFechaReunion($idmaestro, $fechaIni, $idgestion)
    {
//        var_dump($idmaestro);
//        var_dump($fechaIni);
//        var_dump(new \DateTime($fechaIni));

        $repo = $this->_em->getRepository("SistemaColegioBundle:ReunionMaestro");
        $reunion = $repo->findOneBy(array(
            "idmaestro" => $idmaestro,
            "idgestion" => $idgestion,
            "fechaHora" => new \DateTime($fechaIni)
        ));
//        var_dump(is_null($reunion));
//        die();
        return is_null($reunion);
    }
}
